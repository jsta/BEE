#!/usr/bin/env python3

"""BEEStart.

This script manages the startup of the BEE daemons and supporting services.
If no arguments are given this script will start the BEEWorkflowManager,
BEETaskManager, and all required supporting services. If any combination of
services is specified using the appropriate flag(s) then ONLY those services
will be started.
"""

import argparse
import getpass
import os
import shutil
import subprocess
import sys
import tempfile
from beeflow.common.config.config_driver import BeeConfig


def StartGDB(bc, debug=False):

    if shutil.which("ch-tar2dir") == None or shutil.which("ch-run") == None:
        print("ch-tar2dir or ch-run not found. Charliecloud required for neo4j container.")
        return False

    user_workdir = bc.userconfig.get('DEFAULT', 'bee_workdir')

    if bc.userconfig.has_section('graphdb'):
        graphsec = bc.userconfig['graphdb']
        db_hostname = graphsec.get('hostname','localhost')
        db_password = graphsec.get('dbpass','password')
        bolt_port = graphsec.get('bolt_port','7687')
        http_port = graphsec.get('http_port','7474')
        https_port = graphsec.get('https_port','7473')
        gdb_img = graphsec.get('gdb_image','')
        gdb_img_mntdir = graphsec.get('gdb_image_mntdir','/tmp')
    else:
        print("[graphdb] section not found in configuration file, default values will be added")

        graphdb_dict = {
            'name': 'graphdb',
            'hostname': 'localhost',
            'dbpass': 'password',
            'bolt_port': 7687,
            'http_port': 7474,
            'https_port': 7473,
            'gdb_image': '/path/to/neo4j-ch.tar',
            'gdb_image_mntdir': '/tmp',
        }
        
        bc.add_section('user', graphdb_dict)
        print("Please check " + str(bc.userconfig_file) + " and rerun startup")
        return False

    container_dir = tempfile.mkdtemp(suffix="_" + getpass.getuser(), prefix="gdb_", dir=str(gdb_img_mntdir))
    if debug:
        print("GraphDB container mount directory " + container_dir + " created")

    try:
        cp = subprocess.run(["ch-tar2dir",str(gdb_img),str(container_dir)], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True)
    except subprocess.CalledProcessError as cp:
        print("ch-tar2dir failed")
        shutil.rmtree(container_dir)
        if debug:
            print(cp.stdout.decode())
            print("GraphDB container mount directory " + container_dir + " removed")
        return False
    else:
        if debug:
            print(cp.stdout.decode())

    newdir = os.path.split(container_dir)[1]

    container_path = container_dir + "/" + os.listdir(str(container_dir))[0]
    gdb_workdir = os.path.join(user_workdir, newdir)
    gdb_config_path = os.path.join(gdb_workdir, "conf")
    os.makedirs(gdb_config_path, exist_ok=True)
    gdb_configfile = shutil.copyfile(container_path + "/var/lib/neo4j/conf/neo4j.conf", gdb_config_path + "/neo4j.conf")
    if debug:
        print(gdb_configfile)
            
    cfile = open(gdb_configfile, "rt")
    data = cfile.read()
    cfile.close()
    data = data.replace("#dbms.connector.bolt.listen_address=:7687", "dbms.connector.bolt.listen_address=:" + str(bolt_port))
    data = data.replace("#dbms.connector.http.listen_address=:7474", "dbms.connector.http.listen_address=:" + str(http_port))
    data = data.replace("#dbms.connector.https.listen_address=:7473", "dbms.connector.https.listen_address=:" + str(https_port))
    cfile = open(gdb_configfile, "wt")
    cfile.write(data)
    cfile.close()

    gdb_data_path = os.path.join(gdb_workdir, "data")
    os.makedirs(gdb_data_path, exist_ok=True)

    gdb_log_path = os.path.join(gdb_workdir, "logs")
    os.makedirs(gdb_log_path, exist_ok=True)

    gdb_run_path = os.path.join(gdb_workdir, "run")
    os.makedirs(gdb_run_path, exist_ok=True)

    gdb_certs_path = os.path.join(gdb_workdir, "certificates")
    os.makedirs(gdb_certs_path, exist_ok=True)

    try:
        cp = subprocess.run(["ch-run","--set-env=" + container_path + "/environment","-b",gdb_config_path + ":/var/lib/neo4j/conf","-b",gdb_data_path + ":/data","-b",gdb_log_path + ":/logs","-b",gdb_run_path + ":/var/lib/neo4j/run",container_path,"--","neo4j-admin","set-initial-password",str(db_password)], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True)
    except subprocess.CalledProcessError as cp:
        print("neo4j-admin set-initial-password failed")
        print(cp.stdout.decode())
        return False
    else:
        if debug:
            print(cp.stdout.decode())

    try:
        if debug:
            subprocess.run(["ch-run","--set-env=" + container_path + "/environment","-b",gdb_config_path + ":/var/lib/neo4j/conf","-b",gdb_data_path + ":/data","-b",gdb_log_path + ":/logs","-b",gdb_run_path + ":/var/lib/neo4j/run","-b",gdb_certs_path + ":/var/lib/neo4j/certificates",container_path,"--","neo4j","console"])
        else:
            cp = subprocess.run(["ch-run","--set-env=" + container_path + "/environment","-b",gdb_config_path + ":/var/lib/neo4j/conf","-b",gdb_data_path + ":/data","-b",gdb_log_path + ":/logs","-b",gdb_run_path + ":/var/lib/neo4j/run","-b",gdb_certs_path + ":/var/lib/neo4j/certificates",container_path,"--","neo4j","start"],stdout=subprocess.PIPE,stderr=subprocess.STDOUT, check=True)
    except subprocess.CalledProcessError as cp:
        print("neo4j failed to start")
        print(cp.stdout.decode())
        return False

    return True


def StartServer(debug=False):

    try:
        cp = subprocess.run(["python","beeflow/server/server.py"],stdout=subprocess.PIPE,stderr=subprocess.STDOUT,check=True)
    except subprocess.CalledProcessError as cp:
        print("BEEWorkflowManager failed")
        print(cp.stdout.decode())
        return False
    else:
        if debug:
            print(cp.stdout.decode())

    return True


def StartTaskManager(debug=False):
    return


def parse_args(args=sys.argv[1:]):
    """Parse arguments."""
    parser = argparse.ArgumentParser(description=sys.modules[__name__].__doc__, formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("-d", "--debug", action="store_true",
                        help="enable debugging output\nIf debug is specified all output will go to the console.\nOnly one BEE service may be launched by BEEStart if debug is requested.")
    parser.add_argument("--wfm", action="store_true", help="start the BEEWorkflowManager (implies --gdb)")
    parser.add_argument("--gdb", action="store_true", help="start the configured graph database")
    parser.add_argument("--tm", action="store_true", help="start the BEETaskManager")

    return parser.parse_args(args)

def testconfig(bc):
    print(bc.userconfig_file)
    print(os.path.dirname(bc.userconfig_file))

def main():
    args = parse_args()
    if args.debug and not (sum([args.wfm,args.tm,args.gdb]) == 1):
        print("DEBUG requested, exactly one service must be specified")
    else:
        bc = BeeConfig()
        if args.gdb:
            StartGDB(bc,args.debug)

    if not any(value == 1 for value in vars(args).values()):
        # If no flags given, start everything.

        bc = BeeConfig()
        #testconfig(bc)
#        if StartGDB(bc):
#            print("Started graph database")
#        else:
#            print("Error starting graph database")
#            return False
        if StartServer():
            print("Started BEEWorkflowManager")
        else:
            print("Error starting BEEWorkflowManager")
            return False
        #StartTaskManager()
    elif True:
        pass

if __name__ == "__main__":
    sys.exit(main())
